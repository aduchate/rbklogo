{
  function async(sync, loc, local, global, extra) {
    var deferred = $.Deferred();
    if (logo.delay>=0) {
        setTimeout(function() {
            logoCode.setSelection({'line':loc.start.line-1,'ch':loc.start.column-1},{'line':loc.end.line-1,'ch':loc.end.column-1});
            if (logo.breakPoints[loc.start.line]) {
                logo.pause();
            }
            var fn = function () {
                if (logo.aborted) {
                    deferred.fail("Interrupted");
                    return;
                }
                if (logo.paused) { setTimeout(fn, 100); } else {
                    try {
                        deferred.resolve(sync(local, global, extra));
                    } catch (e) {
                        deferred.fail(e);
                    }
                }
            }
            fn();
        }, logo.delay);
    } else {
        deferred.resolve(sync(local, global, extra));
    }
    return deferred.promise();
  }
}

start =     prog /* Returns the promise from lines */

prog =      _ head:line tail:(_ EOL _ line?)* {
                return function() {
                    var global = {};
                    var local = {};
                    //Lines already return promises
                    var p = head(global,local);

                    tail.forEach(function(f) {
                        if (f[3]) {
                            p = p.then(function() { return f[3](global,local); });
                        }
                    });
                    return p;
                };
            }

line =      p:procDecl {
                return function(global,local) { p(global, local); return $.Deferred().resolveWith(this); }
            }
            /_ head:exec tail:(__ exec)* _ comment? {
                return function(global,local) {
                    var p = head(global,local);

                    tail.forEach(function(f) {
                        p = p.then(function() { return f[1](global,local); });
                    });

                    return p;
                };
            }
            / comment {
                return function() { return $.Deferred().resolveWith(this); }
            }
            / print _ comment?  {
                return function() { return $.Deferred().resolveWith(this); }
            }
            / '' {
                return function() { return $.Deferred().resolveWith(this); }
            }

exec =      repeat  /* pass the promise along */
            / cmd:cmd {
                var loc = location();
                return function(global,local,location) {
                    return async(cmd, loc, global, local);
                }
            }
            / ifelse / ife / fore
            / procInvoke  /* pass the promise along */

cmd =       fd / bk / rt / lt / cs / pu / pd / ht / st / stop / pc / cc
            / pause / ds / fontsize / fontstyle / fontname / print / home / setxy / make / localmake

procInvoke= _ name:name __ params:expression* _ {
                return function(global, local) {
                    var newLocal = {}; //Should we add local to newLocal ?
                    var proc = global[name()];

                    if (proc) {
                        var i=0;
                        proc.params.forEach(function (p) {
                            newLocal[p] = params[i++](global, local);
                        });

                        return proc.body(global, newLocal);
                    }
                }
            }

procDecl =  _ 'to' __ name:name __ params:(parameterDeclarations _)? EOL? lines:(line? EOL)+ _ 'end' _ {
                return function(global) {
                    global[name()] = { params: params[0].map(function(p) {return p();}), body: function(global, local) {
                        var p = $.Deferred().resolveWith(this);

                        lines.forEach(function(f) {
                            p = p.then(function() { return f[0](global,local); });
                        });

                        return p;
                    }};
                };
            }

parameterDeclarations = ':' head:name _ tail:(',' _ parameterDeclarations)* {
                var params = [head];
                tail.forEach(function(p) { params.push(p); });

                return params;
            }

func =      random / repcount / getangle / getx / gety

repeat =    ('repeat' / 'repete') __ ex:expression __ blk:block {
                 return function(global, local) {
                    var p = $.Deferred().resolveWith(this);
                    for (var i=0; i<ex(global, local); i++) {
                        //Explicitely capture i
                        (function(i) {
                            p = p.then(function() { return blk(global, local, { '$repCount':i }); });
                        }(i));
                    }

                    return p;
                 };
             }

block =     '[' _ EOL* cmds:(_ exec _ EOL*)+ _ ']' {
                return function(global, local, extra) {
                    var newLocal = {}
                    Object.keys(local).forEach(function(k) { newLocal[k] = local[k]; });
                    if (extra) { Object.keys(extra).forEach(function(k) { newLocal[k] = extra[k]; }); }

                    var p = $.Deferred().resolveWith(this);

                    cmds.forEach(function(f) {
                        p = p.then(function() { return f[1](global, newLocal); });
                    });

                    return p;
                };
            }

ife =       'if' __ cmp:comparison _ blk:block {
                return function(global, local) {
                    if (cmp(global, local)) { return blk(global, local); }
                    return $.Deferred().resolveWith(this);
                }
            }

ifelse =       'ifelse' __ cmp:comparison _ blk:block _ blkelse:block {
                return function(global, local) {
                    if (cmp(global, local)) { return blk(global, local); } else { return blkelse(global, local); }
                }
            }

comparison= ex1:expression _ op:comparisonOperator _ ex2:expression {
                return function(global, local) {
                    return  op === '<' ? ex1(global, local) < ex2(global, local) :
                            op === '>' ? ex1(global, local) > ex2(global, local) :
                            op === '=' ? ex1(global, local) == ex2(global, local) :
                            op === '<=' ? ex1(global, local) <= ex2(global, local) :
                            op === '>=' ? ex1(global, local) >= ex2(global, local) :
                            op === '==' ? ex1(global, local) == ex2(global, local) :
                            op === '!=' ? ex1(global, local) != ex2(global, local) :
                            op === '<>' ? ex1(global, local) != ex2(global, local) : false;
                }
            }

comparisonOperator = '<=' / '>=' / '==' / '!=' / '<>' / '<' / '>' / '='

make =          'make' __ STRINGLITERAL __ value

localmake =     'localmake' __ STRINGLITERAL __ value

print =         'print' __ (value / quotedstring)

quotedstring =  '[' _ STRINGLITERAL? (__ STRINGLITERAL)* _ ']'

name =          STRING

value =         STRINGLITERAL / expression / deref

parenExpression='(' _ ex:expression _ ')' { return ex; }

signExpression= op:('+'/'-')? _ atomic:(number / deref / func / parenExpression) {
                    return op && op == '-' ? function(global, local) { return -atomic(global, local); } : atomic;
                }

powerExpression =
                head:signExpression tail:(_ '^' powerExpression )? {
                    return tail ? function(global, local) { return Math.pow(head(global, local),tail[2](global, local)); } : head;
                }

multiplyingExpression =
                head:powerExpression tail:(_ ('*' / '/' / '%') _ multiplyingExpression)?  {
                    if (tail) {
                        var l = head;
                        var op = tail[1];
                        var r = tail[3];

                        return function(global, local) { return op == '*' ? l(global, local) * r(global, local) : op == '/' ? l(global, local) / r(global, local) : l(global, local) % r(global, local); }
                    } else {
                        return head;
                    }
                }

expression =    head:multiplyingExpression tail:(_ ('-'/'+') _ expression)? {
                    if (tail) {
                        var l = head;
                        var op = tail[1];
                        var r = tail[3];

                        return function(global, local) { return op == '-' ? l(global, local) - r(global, local) : l(global, local) + r(global, local); }
                    } else {
                        return head;
                    }
                }

deref =         ':' name:name {
                    return function(global, local) { return local[name()] ? local[name()]:global[name()]; };
                }

fd  =           ('fd' / 'forward' / 'avance' / 'av' ) ![a-zA-Z0-9_] __ val:expression {
                    return function(global, local) {logo.turtle.fw(val(global, local));};
                  }

bk  =           ('bk' / 'backward' / 'back' / 'recule' / 're' ) ![a-zA-Z0-9_] __ val:expression {
                    return function(global, local) {logo.turtle.fw(-val(global, local));};
                  }

rt  =           ('rt' / 'right' / 'droite'/ 'dr') ![a-zA-Z0-9_] __ val:expression {
                    return function(global, local) {logo.turtle.lt(-val(global, local));};
                }

lt  =           ('lt' / 'left' / 'gauche' / 'ga' ) ![a-zA-Z0-9_] __ val:expression {
                    return function(global, local) {logo.turtle.lt(val(global, local));};
                }

cs  =           ('cs' / 'clearscreen' / 'cls' / 'clear' / 've' / 'videecran') ![a-zA-Z0-9_] {
                    return function() {logo.clear();};
                }

pu  =           ('pu' / 'penup' / 'levecrayon' / 'lc') ![a-zA-Z0-9_] {
                    return function() {logo.turtle.pen = false;};
                }

pd  =           ('pd' / 'pendown'/ 'baissecrayon' / 'bc') ![a-zA-Z0-9_] {
                    return function() {logo.turtle.pen = true;};
                }

ht  =           ('ht' / 'hideturtle' / 'ct' / 'cachetortue') ![a-zA-Z0-9_] {
                    return function() {logo.turtle.hide();};
                }

st  =           ('st' / 'showturtle' / 'mt' / 'montretortue') ![a-zA-Z0-9_] {
                    return function() {logo.turtle.show();};
                }

home =          ('home' / 'maison' / 'centre') ![a-zA-Z0-9_] {
                    return function() {logo.turtle.home();};
                }

stop =          'stop' ![a-zA-Z0-9_]

setxy =         ('setxy' / 'vaxy') __ x:expression __ y:expression  ![a-zA-Z0-9_] {
                    return function(global, local) {logo.turtle.set(x(global, local),y(global, local));};
                }

random =        'random' __ expression

getangle =      'getangle' ![a-zA-Z0-9_] {
                    return function() { return logo.turtle.direction;};
                }

getx =          'getx'  ![a-zA-Z0-9_] {
                    return function() { return logo.turtle.x;};
                }

gety =          'gety'  ![a-zA-Z0-9_] {
                    return function() {return logo.turtle.y; };
                }

/**--This value will tell you which repeat value you are on inside the innermost repeat loop.--**/
/**--This value starts at 1.--**/
/**--If you are not in a repeat loop, it will evaluate to 0.--**/
repcount =      'repcount' {
                    return function(global, local) { return local['$repCount'] ? local['$repCount'] : 0; };
                }

/* --modified to make the step optional-- */
fore=           ('for' / 'boucle') _ '[' _ name __ expression __ expression (__ expression)? _ ']' _ block

pc  =           ('pc' / 'pencolor' / 'cc' / 'couleurcrayon' ) __ color:(name / expression expression expression expression? / hexcolor) {
                    return function(global, local) { return local['$repCount'] ? local['$repCount'] : 0; };
                }

/* --change canvas color-- */
cc  =           ('cc' / 'canvascolor') __ color:(name / expression expression expression / hexcolor)

hexcolor =      '#'HEX

HEX =           [0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]

pause =         'pause' __ expression

/* --draw a string to the canvas-- */
ds  =           ('ds'/'drawstring'/'label'/'tracetexte'/'tt') __ value

fontname =      'fontname' __ name

fontsize
    = 'fontsize' __ expression

fontstyle
    = 'fontstyle' __ style

style
    = 'bold' / 'plain' / 'italic'

number
    = NUMBER

comment
    = COMMENT

STRINGLITERAL = '"' lit:STRING {
                    return lit;
                }

STRING =        head:[a-zA-Z] tail:[a-zA-Z0-9_]* {
                    return function() {
                        return head + tail.join('');
                    }
                }

NUMBER =        intpart:([0-9]+) fracpart:('.' [0-9]+)? {
                    if (fracpart) { fracpart.splice(0,1); }
                    var val = parseInt(intpart.join(""))+(fracpart?(1.0*parseInt(fracpart.join(""))/Math.pow(10,fracpart.length)):0);
                    return function() { return val; }
                }

COMMENT
    = '' ![\r\n]*

EOL "end of line"
   = [\r\n]+

// optional whitespace
_  = [ \t]*

// mandatory whitespace
__ = [ \t]+